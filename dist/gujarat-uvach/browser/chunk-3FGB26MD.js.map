{
  "version": 3,
  "sources": ["src/app/common/services/development.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { AbstractControl, FormArray, FormBuilder, FormControl, FormGroup } from '@angular/forms';\r\nimport { AspectRatios, ImageElement } from '../interfaces/image-element';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DevelopmentService {\r\n  constructor(private fb: FormBuilder) { }\r\n  public ReportDate: any = new Date();\r\n  public formattedDate: any;\r\n  public getDate() {\r\n    const year = this.ReportDate.getFullYear();\r\n    const month = String(this.ReportDate.getMonth() + 1).padStart(2, '0'); // Adding 1 to get correct month (as it's zero-based)\r\n    const day = String(this.ReportDate.getDate()).padStart(2, '0');\r\n    this.formattedDate = `${year}-${month}-${day}`;\r\n    return this.formattedDate;\r\n  }\r\n\r\n  markFormGroupTouched(formGroup: FormGroup) {\r\n  Object.keys(formGroup.controls).forEach(controlName => {\r\n    const control = formGroup?.get(controlName);\r\n\r\n    if (control instanceof FormControl) {\r\n      if (!control.touched) {\r\n        control.markAsTouched();\r\n        control.updateValueAndValidity();\r\n      }\r\n    } else if (control instanceof FormGroup) {\r\n      this.markFormGroupTouched(control);\r\n    } else if (control instanceof FormArray) {\r\n      this.markFormArrayTouched(control);\r\n    }\r\n  });\r\n}\r\n  markFormArrayTouched(formArray: FormArray) {\r\n    formArray.controls.forEach(control => {\r\n      if (control instanceof FormGroup) {\r\n        this.markFormGroupTouched(control);\r\n      } else if (control instanceof FormArray) {\r\n        this.markFormArrayTouched(control);\r\n      }\r\n    });\r\n  }\r\n  setControl(formGroup: FormGroup, controlName: string, defaultValue: any, validators?: any[]): void {\r\n    if (formGroup.get(controlName)) {\r\n      return;\r\n    }\r\n    const control = this.fb.control(defaultValue, validators);\r\n    control.markAsUntouched;\r\n    formGroup.addControl(controlName, control);\r\n  }\r\n  removeControls(formGroup: FormGroup, controlNames: string[]): void {\r\n    controlNames.forEach(controlName => {\r\n      if (formGroup.get(controlName)) {\r\n        formGroup.removeControl(controlName);\r\n      }\r\n    });\r\n  }\r\n  filterAndSetValue(control: AbstractControl | null) {\r\n    const value = control?.value;\r\n    if (value !== undefined && value !== null) {\r\n      const filteredValue = value.toString().replace(/^0+(?=\\d)/, ''); // Remove leading zeros\r\n      const intValue = parseInt(filteredValue, 10) || 0; // Convert to integer, default to 0 if NaN\r\n      intValue.toString() !== filteredValue && control?.setValue(intValue); // Set the filtered and converted value\r\n    }\r\n  };\r\n  calculateWH(image: ImageElement): { w: number, h: number, cW: number, cH: number } {\r\n    let cW = 320;\r\n    let cH = 320;\r\n    let w = 320;\r\n    let h = 320;\r\n    const shape = image.shape;\r\n    const aspectRatios: AspectRatios = {\r\n      'circle': { ratio: 1, divisor: 1 },\r\n      'rect': { ratio: 1, divisor: 1 },\r\n      'ellipse': { ratio: 1, divisor: 1 },\r\n      'rect_3_2': { ratio: 3, divisor: 2 },\r\n      'rect_4_3': { ratio: 4, divisor: 3 },\r\n      'rect_16_9': { ratio: 16, divisor: 9 },\r\n      'rect_1_1': { ratio: 1, divisor: 1 },\r\n      'rect_5_4': { ratio: 5, divisor: 4 },\r\n      'rect_3_1': { ratio: 3, divisor: 1 },\r\n      'rect_7_5': { ratio: 7, divisor: 5 },\r\n      'rect_2_3': { ratio: 2, divisor: 3 },\r\n      'rect_3_4': { ratio: 3, divisor: 4 },\r\n      'rect_9_16': { ratio: 9, divisor: 16 },\r\n      'rect_4_5': { ratio: 4, divisor: 5 },\r\n      'rect_5_7': { ratio: 5, divisor: 7 }\r\n    };\r\n\r\n    // Find the closest match for the shape's aspect ratio from the defined list\r\n    const closestMatch = aspectRatios[shape];\r\n\r\n    // If the shape is found in the list, calculate width and height\r\n    if (closestMatch) {\r\n      const r = image.r; // Assuming r is the radius\r\n      cW = w;\r\n      cH = (cW * closestMatch.ratio) / closestMatch.divisor;\r\n      w = r * 2;\r\n      h = (w * closestMatch.ratio) / closestMatch.divisor;\r\n    } else {\r\n      console.error('Aspect ratio not defined for shape:', shape);\r\n    }\r\n\r\n    return { w, h, cW, cH };\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
