{
  "version": 3,
  "sources": ["src/app/common/services/user-image-api.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../../environments/environment';\r\nimport { CookieService } from 'ngx-cookie-service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class UserImageApiService {\r\n    private apiUrl = environment.MasterApi + '/user-img'; // Adjust this URL as per your server configuration\r\n\r\n    constructor(private http: HttpClient, private cookieService: CookieService) { }\r\n\r\n    // Create a new folder for a specific user\r\n    createFolder(userid: string, folderName: string): Observable<any> {\r\n        const token = this.cookieService.get('token');\r\n        const headers = new HttpHeaders({\r\n            'Authorization': `Bearer ${token}`\r\n        });\r\n        const body = { folderName, userid: userid };\r\n        return this.http.post(`${this.apiUrl}/folders`, body, { headers });\r\n    }\r\n\r\n    // Get folders for a specific user with pagination, search, and sorting\r\n    getFolders(userid: string, page: number = 1, limit: number = 10, search: string = '', sortBy: string = 'created_at', order: string = 'asc'): Observable<any> {\r\n        const params = new HttpParams()\r\n            .set('userid', userid)\r\n            .set('page', page)\r\n            .set('limit', limit)\r\n            .set('search', search)\r\n            .set('sortBy', sortBy)\r\n            .set('order', order);\r\n\r\n        return this.http.get(`${this.apiUrl}/folders`, { params });\r\n    }\r\n\r\n    // Upload an image to a specific user's folder\r\n    uploadImage(userid: string, folderId: string, imageFile: File, metadata: any): Observable<any> {\r\n        const formData = new FormData();\r\n        formData.append('image', imageFile); // File to upload\r\n        formData.append('metadata', JSON.stringify(metadata)); // Additional metadata\r\n        formData.append('userid', userid); // Pass userid with the form data\r\n        formData.append('folderId', folderId.toString()); // Pass userid with the form data\r\n        const token = this.cookieService.get('token');\r\n        const headers = new HttpHeaders({\r\n            'Authorization': `Bearer ${token}`\r\n        });\r\n        return this.http.post(`${this.apiUrl}/folders/${folderId}/images`, formData, { headers });\r\n    }\r\n\r\n    // Get images within a specific user's folder with pagination, search, and sorting\r\n    getImagesInFolder(userid: string, folderId: string, page: number = 1, limit: number = 10, search: string = '', sort: string = 'asc'): Observable<any> {\r\n        const params = new HttpParams()\r\n            .set('userid', userid)\r\n            .set('page', page)\r\n            .set('limit', limit)\r\n            .set('search', search)\r\n            .set('sort', sort);\r\n\r\n        return this.http.get(`${this.apiUrl}/folders/${folderId}/images`, { params });\r\n    }\r\n\r\n    deleteImage(userid: string, folderId: string, imageId: number): Observable<any> {\r\n        const token = this.cookieService.get('token');\r\n        const headers = new HttpHeaders({\r\n            'Authorization': `Bearer ${token}`\r\n        });\r\n\r\n        // Pass userid as a query parameter\r\n        return this.http.delete(`${this.apiUrl}/folders/${folderId}/images/${imageId}`, {\r\n            headers: headers,\r\n            params: { userid: userid } // Pass userid as query parameter\r\n        });\r\n    }\r\n\r\n\r\n\r\n    // Get the total count of folders for a user\r\n    getTotalFolderCount(userid: string, search: string = ''): Observable<{ count: number }> {\r\n        const params = new HttpParams().set('userid', userid).set('search', search); // Use userid in params\r\n        return this.http.get<{ count: number }>(`${this.apiUrl}/folders/count`, { params });\r\n    }\r\n\r\n    // Get the total image count in a specific folder for a user\r\n    getTotalImageCount(folderId: string, search = ''): Observable<{ totalCount: number }> {\r\n        const params = new HttpParams()\r\n            .set('search', search);\r\n        return this.http.get<{ totalCount: number }>(`${this.apiUrl}/folders/${folderId}/images/count`, { params });\r\n    }\r\n\r\n    // Refresh an image for a specific user\r\n    refreshImage(userid: string, folderId: string, imageId: number, formData: FormData): Observable<any> {\r\n        formData.append('userid', userid); // Include userid in the form data\r\n        return this.http.post(`${this.apiUrl}/folders/${folderId}/images/${imageId}/refresh`, formData);\r\n    }\r\n\r\n    // Get image data\r\n    getImage(imageId: string, quality?: number, format?: string, thumb?: boolean): Observable<any> {\r\n        let params: any = {};\r\n        if (quality) params.quality = quality.toString();\r\n        if (format) params.format = format;\r\n        if (thumb) params.thumb = 'true';\r\n        return this.http.get(`${this.apiUrl}/uploads/${imageId}`, { params, responseType: 'blob' });\r\n    }\r\n\r\n    // Delete a folder for a specific user\r\n    deleteFolder(folderId: string): Observable<any> {\r\n        const token = this.cookieService.get('token'); // Assuming you're using CookieService to get the token\r\n        const headers = new HttpHeaders({\r\n            'Authorization': `Bearer ${token}` // Pass the token in the Authorization header\r\n        });\r\n\r\n        return this.http.delete(`${this.apiUrl}/folders/${folderId}`, {\r\n            headers: headers\r\n        });\r\n    }\r\n\r\n\r\n    // Rename a folder\r\n    renameFolder(folderId: string, folderName: string): Observable<any> {\r\n        const token = this.cookieService.get('token'); // Get the token from cookies\r\n        const headers = new HttpHeaders({\r\n            'Authorization': `Bearer ${token}`,\r\n            'Content-Type': 'application/json' // Optional header\r\n        });\r\n\r\n        const body = { folderName: folderName }; // No need to include userid\r\n        return this.http.put(`${this.apiUrl}/folders/${folderId}/rename`, body, { headers });\r\n    }\r\n\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
