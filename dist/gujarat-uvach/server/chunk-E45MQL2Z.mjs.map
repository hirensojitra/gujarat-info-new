{
  "version": 3,
  "sources": ["src/app/module/auth/login/login.component.ts", "src/app/module/auth/login/login.component.html", "src/app/module/auth/login/login-routing.module.ts", "src/app/module/auth/login/login.module.ts"],
  "sourcesContent": ["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { UserService } from '../../../common/services/user.service';\r\nimport { AuthService } from '../../../common/services/auth.service';\r\nimport { ToastService } from '../../../common/services/toast.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private userService: UserService,\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private toast: ToastService\r\n  ) {\r\n    // Initialize the login form with validators\r\n    this.loginForm = this.fb.group({\r\n      username: ['', [Validators.required]],\r\n      password: ['', [Validators.required, Validators.minLength(6)]],\r\n    });\r\n\r\n  }\r\n  async ngOnInit(): Promise<void> {\r\n\r\n  }\r\n\r\n  // Handle form submission for login\r\n  onSubmit() {\r\n    if (this.loginForm.valid) {\r\n      const loginData = this.loginForm.value;\r\n\r\n      this.authService.loginUser(loginData.username, loginData.password).subscribe(\r\n        response => {\r\n          if (response.token) {\r\n            this.userService.setUser(response);  // Passing the entire response since it includes user data\r\n            this.authService.setToken(response.token);\r\n            this.userService.getUser().subscribe(data => {\r\n              console.log(data)\r\n            })\r\n            this.router.navigate(['/dashboard']);\r\n          } else if (response.error) {\r\n            // Handle error and show toast notification for error message\r\n            this.toast.show(response.error, { class: 'bg-danger' });\r\n          }\r\n        },\r\n        error => {\r\n          // Handle network or server errors\r\n          console.error('Login error:', error);\r\n          this.toast.show('An error occurred during login', { class: 'bg-danger' });\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n}\r\n", "<div class=\"container d-flex align-items-center justify-content-center min-vh-100\">\r\n    <div class=\"card shadow p-4\" style=\"width: 400px; border-radius: 15px;\">\r\n        <div class=\"text-center mb-4\">\r\n            <img src=\"assets/images/svg/logo.svg\" alt=\"logo\" style=\"width: 60px;\" />\r\n            <h4 class=\"mt-3\">Welcome to Gujarat Uvach</h4>\r\n            <p>Please enter your details to sign in.</p>\r\n        </div>\r\n\r\n        <div class=\"d-flex justify-content-between mb-3\">\r\n            <button class=\"btn btn-outline-light border w-100 me-2\"><i class=\"fa fa-apple text-dark\"></i></button>\r\n            <button class=\"btn btn-outline-light border w-100 me-2\"><i class=\"fa fa-google text-danger\"></i></button>\r\n            <button class=\"btn btn-outline-light border w-100\"><i class=\"fa fa-twitter text-primary\"></i></button>\r\n        </div>\r\n        <span class=\"or-container\"></span>\r\n        <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n            <div class=\"form-group mb-3\">\r\n                <label for=\"username\" class=\"form-label\">Username</label>\r\n                <input type=\"text\" id=\"username\" class=\"form-control\" formControlName=\"username\" placeholder=\"Enter your username\" />\r\n            </div>\r\n\r\n            <div class=\"form-group mb-3\">\r\n                <label for=\"password\" class=\"form-label\">Password</label>\r\n                <input type=\"password\" id=\"password\" class=\"form-control\" formControlName=\"password\" placeholder=\"Password\" />\r\n                <div class=\"invalid-feedback\">Password must be at least 6 characters.</div>\r\n            </div>\r\n\r\n            <div class=\"form-group form-check mb-3\">\r\n                <input type=\"checkbox\" id=\"rememberMe\" class=\"form-check-input\" />\r\n                <label for=\"rememberMe\" class=\"form-check-label\">Remember me</label>\r\n                <a href=\"#\" class=\"float-end text-decoration-none\">Forgot password?</a>\r\n            </div>\r\n\r\n            <button type=\"submit\" class=\"btn btn-dark w-100 mb-3\" [disabled]=\"loginForm.invalid\">Sign in</button>\r\n        </form>\r\n\r\n        <div class=\"text-center\">\r\n            <p>Don't have an account yet? <a [routerLink]=\"'/auth/register'\" class=\"text-decoration-none\">Sign Up</a></p>\r\n        </div>\r\n    </div>\r\n</div>", "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { LoginComponent } from './login.component';\r\n\r\nconst routes: Routes = [{\r\n  path: '',\r\n  component: LoginComponent,\r\n  data: {\r\n    title: 'Gujarat Uvach | Authentication',\r\n    description: 'Login or register to Gujarat Uvach portal for accessing services',\r\n    keywords: 'Gujarat Uvach, login, register, authentication, portal',\r\n    robots: 'index, follow',\r\n  }\r\n}];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class LoginRoutingModule { }\r\n", "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { LoginRoutingModule } from './login-routing.module';\r\nimport { LoginComponent } from './login.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { SharedModule } from '../../../common/shared/shared.module';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    LoginComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    LoginRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    SharedModule\r\n  ]\r\n})\r\nexport class LoginModule { }\r\n"],
  "mappings": "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",
  "names": []
}
