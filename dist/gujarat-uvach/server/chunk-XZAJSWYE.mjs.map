{
  "version": 3,
  "sources": ["src/app/module/auth/register/register.component.ts", "src/app/module/auth/register/register.component.html", "src/app/module/auth/register/register-routing.module.ts", "src/app/module/auth/register/register.module.ts"],
  "sourcesContent": ["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { UserService } from '../../../common/services/user.service';\r\nimport { ToastService } from '../../../common/services/toast.service';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss'],\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  registrationForm: FormGroup;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private userService: UserService,\r\n    private router: Router,\r\n    private toast: ToastService\r\n  ) {\r\n    // Initialize the registration form with validators\r\n    this.registrationForm = this.fb.group({\r\n      username: ['', [Validators.required]],\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required, Validators.minLength(6)]],\r\n      roles: ['user'], // Default role, adjust as necessary\r\n      emailVerified: [false], // Default value\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void { }\r\n\r\n  // Method to register a user\r\n  register(): void {\r\n    const pass = this.registrationForm.get('password')?.value;\r\n    // this.registrationForm.get('password')?.setValue(md5.appendStr(pass).end() as string);\r\n\r\n    if (this.registrationForm.valid) {\r\n      const { username, password, email, emailVerified } = this.registrationForm.value;\r\n      const roles = ['user'];\r\n\r\n      this.userService.registerUser(username, password, email, roles, emailVerified).subscribe(\r\n        response => {\r\n          response.error ? this.toast.show(response.error, { class: 'bg-danger' }) : this.router.navigate(['/auth']);\r\n        },\r\n        error => {\r\n          console.error('Error registering user:', error);\r\n        }\r\n      );\r\n    } else {\r\n      this.markFormGroupTouched(this.registrationForm);\r\n    }\r\n    this.registrationForm.get('password')?.setValue(pass);\r\n  }\r\n  // Method to mark form controls as touched for validation feedback\r\n  private markFormGroupTouched(formGroup: FormGroup) {\r\n    Object.keys(formGroup.controls).forEach((key) => {\r\n      const control = formGroup.controls[key];\r\n      control.markAsTouched();\r\n      if (control instanceof FormGroup) {\r\n        this.markFormGroupTouched(control);\r\n      }\r\n    });\r\n  }\r\n}\r\n", "<div class=\"container d-flex align-items-center justify-content-center min-vh-100\">\r\n    <div class=\"card shadow p-4\" style=\"width: 400px; border-radius: 15px;\">\r\n        <div class=\"text-center mb-4\">\r\n            <img src=\"assets/images/svg/logo.svg\" alt=\"logo\" style=\"width: 60px;\" />\r\n            <h4 class=\"mt-3\">Create an account</h4>\r\n            <p>Please fill in the details to sign up.</p>\r\n        </div>\r\n        <form [formGroup]=\"registrationForm\" (ngSubmit)=\"register()\">\r\n            <input type=\"hidden\" formControlName=\"roles\">\r\n            <div class=\"form-group mb-3\">\r\n                <label for=\"username\" class=\"form-label\">Username</label>\r\n                <input type=\"text\" id=\"username\" class=\"form-control\" formControlName=\"username\" placeholder=\"Enter your username\" [ngClass]=\"{ 'is-invalid': registrationForm.get('username')?.invalid && registrationForm.get('username')?.touched }\" />\r\n                <div class=\"invalid-feedback\">Username is required.</div>\r\n            </div>\r\n            <div class=\"form-group mb-3\">\r\n                <label for=\"email\" class=\"form-label\">E-Mail Address</label>\r\n                <input type=\"email\" id=\"email\" class=\"form-control\" formControlName=\"email\" placeholder=\"Enter your email\" [ngClass]=\"{ 'is-invalid': registrationForm.get('email')?.invalid && registrationForm.get('email')?.touched }\" />\r\n                <div class=\"invalid-feedback\">Please enter a valid email.</div>\r\n            </div>\r\n            <div class=\"form-group mb-3\">\r\n                <label for=\"password\" class=\"form-label\">Password</label>\r\n                <input type=\"password\" id=\"password\" class=\"form-control\" formControlName=\"password\" placeholder=\"Password\" />\r\n                <div class=\"invalid-feedback\">Password must be at least 6 characters long.</div>\r\n            </div>\r\n            <button type=\"submit\" class=\"btn btn-dark w-100 mb-3\" [disabled]=\"registrationForm.invalid\">Sign Up</button>\r\n        </form>\r\n        <div class=\"text-center\">\r\n            <p>Already have an account? <a [routerLink]=\"'/auth/login'\" class=\"text-decoration-none\">Sign In</a></p>\r\n        </div>\r\n    </div>\r\n</div>", "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { RegisterComponent } from './register.component';\r\n\r\nconst routes: Routes = [{\r\n  path: '',\r\n  component: RegisterComponent,\r\n  data: {\r\n    title: 'Gujarat Uvach | Register',\r\n    description: 'Login or register to Gujarat Uvach portal for accessing services',\r\n    keywords: 'Gujarat Uvach, login, register, portal',\r\n    robots: 'index, follow',\r\n    image: 'https://test-ssr-hiren.netlify.app/assets/images/jpg/register.jpg'\r\n  }\r\n}];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class RegisterRoutingModule { }\r\n", "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { RegisterRoutingModule } from './register-routing.module';\r\nimport { RegisterComponent } from './register.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { SharedModule } from '../../../common/shared/shared.module';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    RegisterComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    RegisterRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    SharedModule\r\n  ]\r\n})\r\nexport class RegisterModule { }\r\n"],
  "mappings": "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",
  "names": []
}
