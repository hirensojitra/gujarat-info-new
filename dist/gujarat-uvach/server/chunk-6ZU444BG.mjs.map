{
  "version": 3,
  "sources": ["src/app/common/guards/auth.guard.ts", "src/app/common/guards/role.guard.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { AuthService } from '../services/auth.service';\r\nimport { PlatformService } from '../services/platform.service'; // Ensure you have this service\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private platformService: PlatformService\r\n  ) { }\r\n\r\n  async canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Promise<boolean> {\r\n    if (this.platformService.isBrowser()) {\r\n      if (this.authService.isAuthenticated()) {\r\n        return true;\r\n      } else {\r\n        this.router.navigate(['/auth/login'], { queryParams: { returnUrl: state.url } });\r\n        return false; // Prevent access and redirect to login\r\n      }\r\n    }\r\n    if (!this.authService.isAuthenticated()) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n", "import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\r\nimport { AuthService } from '../services/auth.service';  // Ensure you have this service\r\nimport { PlatformService } from '../services/platform.service'; // Ensure you have this service\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { CookieService } from 'ngx-cookie-service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class RoleGuard implements CanActivate {\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private platformService: PlatformService,\r\n    private cookieService: CookieService\r\n  ) { }\r\n\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean> {\r\n    const expectedRoles = route.data['role'] || [];\r\n    // Check if running on the server\r\n    if (!this.platformService.isBrowser()) {\r\n      // Handle server-side logic\r\n      const isAuthenticated = this.authService.isAuthenticated();\r\n      if (!isAuthenticated) {\r\n        return of(false); // Prevent access to the route\r\n      }\r\n\r\n      const hasRole = this.authService.hasRole(expectedRoles);\r\n      return of(hasRole); // Return observable for server-side\r\n    } else {\r\n      // Client-side authentication and role check\r\n      if (this.authService.isAuthenticated()) {\r\n        const hasRole = this.authService.hasRole(expectedRoles); // Assuming hasRole is a synchronous check\r\n        if (hasRole) {\r\n          return of(true); // User is authenticated and has the required role\r\n        } else {\r\n          this.router.navigate(['/broken-pages']); // Redirect to unauthorized page\r\n          return of(false); // Prevent access\r\n        }\r\n      } else {\r\n        this.router.navigate(['/auth/login']);\r\n        return of(false); // Prevent access and redirect to login\r\n      }\r\n    }\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAQM,IAAO,YAAP,MAAO,WAAS;EAEpB,YACU,aACA,QACA,iBAAgC;AAFhC,SAAA,cAAA;AACA,SAAA,SAAA;AACA,SAAA,kBAAA;EACN;EAEE,YACJ,OACA,OAA0B;;AAE1B,UAAI,KAAK,gBAAgB,UAAS,GAAI;AACpC,YAAI,KAAK,YAAY,gBAAe,GAAI;AACtC,iBAAO;QACT,OAAO;AACL,eAAK,OAAO,SAAS,CAAC,aAAa,GAAG,EAAE,aAAa,EAAE,WAAW,MAAM,IAAG,EAAE,CAAE;AAC/E,iBAAO;QACT;MACF;AACA,UAAI,CAAC,KAAK,YAAY,gBAAe,GAAI;AACvC,eAAO;MACT;AACA,aAAO;IACT;;;;uBAxBW,YAAS,mBAAA,WAAA,GAAA,mBAAA,MAAA,GAAA,mBAAA,eAAA,CAAA;IAAA;EAAA;;4EAAT,YAAS,SAAT,WAAS,WAAA,YAFR,OAAM,CAAA;EAAA;;;;ACKd,IAAO,YAAP,MAAO,WAAS;EAEpB,YACU,aACA,QACA,iBACA,eAA4B;AAH5B,SAAA,cAAA;AACA,SAAA,SAAA;AACA,SAAA,kBAAA;AACA,SAAA,gBAAA;EACN;EAEJ,YACE,OACA,OAA0B;AAE1B,UAAM,gBAAgB,MAAM,KAAK,MAAM,KAAK,CAAA;AAE5C,QAAI,CAAC,KAAK,gBAAgB,UAAS,GAAI;AAErC,YAAM,kBAAkB,KAAK,YAAY,gBAAe;AACxD,UAAI,CAAC,iBAAiB;AACpB,eAAO,GAAG,KAAK;MACjB;AAEA,YAAM,UAAU,KAAK,YAAY,QAAQ,aAAa;AACtD,aAAO,GAAG,OAAO;IACnB,OAAO;AAEL,UAAI,KAAK,YAAY,gBAAe,GAAI;AACtC,cAAM,UAAU,KAAK,YAAY,QAAQ,aAAa;AACtD,YAAI,SAAS;AACX,iBAAO,GAAG,IAAI;QAChB,OAAO;AACL,eAAK,OAAO,SAAS,CAAC,eAAe,CAAC;AACtC,iBAAO,GAAG,KAAK;QACjB;MACF,OAAO;AACL,aAAK,OAAO,SAAS,CAAC,aAAa,CAAC;AACpC,eAAO,GAAG,KAAK;MACjB;IACF;EACF;;;uBAvCW,YAAS,mBAAA,WAAA,GAAA,mBAAA,MAAA,GAAA,mBAAA,eAAA,GAAA,mBAAA,aAAA,CAAA;IAAA;EAAA;;4EAAT,YAAS,SAAT,WAAS,WAAA,YAFR,OAAM,CAAA;EAAA;;",
  "names": []
}
