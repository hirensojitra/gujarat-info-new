{
  "version": 3,
  "sources": ["src/app/module/email-verification/email-verification.component.ts", "src/app/module/email-verification/email-verification.component.html"],
  "sourcesContent": ["import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { UserService } from '../../common/services/user.service';\r\nimport { User } from '../../common/interfaces/commonInterfaces';\r\n\r\n@Component({\r\n  selector: 'app-email-verification',\r\n  templateUrl: './email-verification.component.html',\r\n  styleUrls: ['./email-verification.component.scss']\r\n})\r\nexport class EmailVerificationComponent implements OnInit {\r\n  verificationStatus: string = 'Verifying...';\r\n  user: User;\r\n  isVerified: boolean = false;\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private userservice: UserService\r\n  ) { }\r\n\r\n  async ngOnInit(): Promise<void> {\r\n    await this.userservice.getUser().subscribe((user) => {\r\n      this.user = user;\r\n    })\r\n    await this.route.queryParams.subscribe(params => {\r\n      const token = params['token'];\r\n      const email = params['email'];\r\n\r\n      if (token && email) {\r\n        if (this.user && !this.user.emailverified) {\r\n          this.userservice.verifyEmail(token, email).subscribe(\r\n            (response) => {\r\n              if (response.success) {\r\n                this.verificationStatus = 'Your email has been successfully verified!';\r\n                if (this.user) { this.user.emailverified = true; }\r\n                this.isVerified = true;\r\n                this.userservice.setUser(this.user);\r\n              } else {\r\n                this.verificationStatus = 'Email verification failed. The token may be expired or invalid.';\r\n\r\n                this.isVerified = false;\r\n              }\r\n            },\r\n            (error) => {\r\n              console.error(error);\r\n              this.verificationStatus = 'An error occurred while verifying your email. Please try again later.';\r\n              this.isVerified = false;\r\n            }\r\n          );\r\n        } else {\r\n          this.verificationStatus = 'Your email has been successfully verified already!';\r\n          this.isVerified = true;\r\n        }\r\n      } else {\r\n        this.verificationStatus = 'Invalid verification link.';\r\n      }\r\n    });\r\n  }\r\n\r\n  // Optional: Redirect the user after verification\r\n  redirectToLogin(): void {\r\n    if (this.isVerified) {\r\n      this.router.navigate(['/login']);\r\n    }\r\n  }\r\n}\r\n", "<div class=\"h-100-vh d-flex flex-column align-items-center justify-content-center\">\r\n    <h2>Email Verification</h2>\r\n    <p>{{ verificationStatus }}</p>\r\n    <button *ngIf=\"isVerified\" (click)=\"redirectToLogin()\" class=\"btn btn-primary\">Go to Login</button>\r\n</div>"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACGI,IAAA,yBAAA,GAAA,UAAA,CAAA;AAA2B,IAAA,qBAAA,SAAA,SAAA,uEAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBAAS,OAAA,gBAAA,CAAiB;IAAA,CAAA;AAA0B,IAAA,iBAAA,GAAA,aAAA;AAAW,IAAA,uBAAA;;;ADOxF,IAAO,6BAAP,MAAO,4BAA0B;EAIrC,YACU,OACA,QACA,aAAwB;AAFxB,SAAA,QAAA;AACA,SAAA,SAAA;AACA,SAAA,cAAA;AANV,SAAA,qBAA6B;AAE7B,SAAA,aAAsB;EAKlB;EAEE,WAAQ;;AACZ,YAAM,KAAK,YAAY,QAAO,EAAG,UAAU,CAAC,SAAQ;AAClD,aAAK,OAAO;MACd,CAAC;AACD,YAAM,KAAK,MAAM,YAAY,UAAU,YAAS;AAC9C,cAAM,QAAQ,OAAO,OAAO;AAC5B,cAAM,QAAQ,OAAO,OAAO;AAE5B,YAAI,SAAS,OAAO;AAClB,cAAI,KAAK,QAAQ,CAAC,KAAK,KAAK,eAAe;AACzC,iBAAK,YAAY,YAAY,OAAO,KAAK,EAAE,UACzC,CAAC,aAAY;AACX,kBAAI,SAAS,SAAS;AACpB,qBAAK,qBAAqB;AAC1B,oBAAI,KAAK,MAAM;AAAE,uBAAK,KAAK,gBAAgB;gBAAM;AACjD,qBAAK,aAAa;AAClB,qBAAK,YAAY,QAAQ,KAAK,IAAI;cACpC,OAAO;AACL,qBAAK,qBAAqB;AAE1B,qBAAK,aAAa;cACpB;YACF,GACA,CAAC,UAAS;AACR,sBAAQ,MAAM,KAAK;AACnB,mBAAK,qBAAqB;AAC1B,mBAAK,aAAa;YACpB,CAAC;UAEL,OAAO;AACL,iBAAK,qBAAqB;AAC1B,iBAAK,aAAa;UACpB;QACF,OAAO;AACL,eAAK,qBAAqB;QAC5B;MACF,CAAC;IACH;;;EAGA,kBAAe;AACb,QAAI,KAAK,YAAY;AACnB,WAAK,OAAO,SAAS,CAAC,QAAQ,CAAC;IACjC;EACF;;;uBAtDW,6BAA0B,4BAAA,cAAA,GAAA,4BAAA,MAAA,GAAA,4BAAA,WAAA,CAAA;IAAA;EAAA;;yEAA1B,6BAA0B,WAAA,CAAA,CAAA,wBAAA,CAAA,GAAA,OAAA,GAAA,MAAA,GAAA,QAAA,CAAA,CAAA,GAAA,YAAA,UAAA,eAAA,sBAAA,wBAAA,GAAA,CAAA,SAAA,mBAAA,GAAA,SAAA,GAAA,MAAA,GAAA,CAAA,GAAA,OAAA,eAAA,GAAA,OAAA,CAAA,GAAA,UAAA,SAAA,oCAAA,IAAA,KAAA;AAAA,UAAA,KAAA,GAAA;ACVvC,QAAA,yBAAA,GAAA,OAAA,CAAA,EAAmF,GAAA,IAAA;AAC3E,QAAA,iBAAA,GAAA,oBAAA;AAAkB,QAAA,uBAAA;AACtB,QAAA,yBAAA,GAAA,GAAA;AAAG,QAAA,iBAAA,CAAA;AAAwB,QAAA,uBAAA;AAC3B,QAAA,qBAAA,GAAA,8CAAA,GAAA,GAAA,UAAA,CAAA;AACJ,QAAA,uBAAA;;;AAFO,QAAA,oBAAA,CAAA;AAAA,QAAA,4BAAA,IAAA,kBAAA;AACM,QAAA,oBAAA;AAAA,QAAA,qBAAA,QAAA,IAAA,UAAA;;;;;;6EDOA,4BAA0B,EAAA,WAAA,8BAAA,UAAA,yEAAA,YAAA,GAAA,CAAA;AAAA,GAAA;",
  "names": []
}
