{
  "version": 3,
  "sources": ["src/app/common/services/image-api.service.ts", "src/app/module/img/img.component.ts", "src/app/module/img/img.component.html", "src/app/module/img/img-routing.module.ts", "src/app/module/img/img.module.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ImageApiService {\r\n  private apiUrl = environment.MasterApi + '/img'; // Adjust this URL as per your server configuration\r\n  constructor(private http: HttpClient) {\r\n\r\n  }\r\n  // Create a new folder\r\n  createFolder(folderName: string): Observable<any> {\r\n    const body = { folderName };\r\n    return this.http.post(`${this.apiUrl}/folders`, body);\r\n  }\r\n\r\n  // Get folder list with pagination, search, and sorting\r\n  getFolders(page: number = 1, limit: number = 10, search: string = '', sortBy: string = 'created_at', order: string = 'asc'): Observable<any> {\r\n    const params = new HttpParams()\r\n      .set('page', page)\r\n      .set('limit', limit)\r\n      .set('search', search)\r\n      .set('sortBy', sortBy)\r\n      .set('order', order);\r\n    return this.http.get(`${this.apiUrl}/folders`, { params });\r\n  }\r\n\r\n\r\n  // Upload an image to a specific folder\r\n  uploadImage(folderId: string, imageFile: File, metadata: any): Observable<any> {\r\n    const formData = new FormData();\r\n    formData.append('image', imageFile); // File to upload\r\n    formData.append('metadata', JSON.stringify(metadata)); // Additional metadata\r\n\r\n    return this.http.post(`${this.apiUrl}/folders/${folderId}/images`, formData);\r\n  }\r\n\r\n  // Get images within a folder with pagination, search, and sorting\r\n  getImagesInFolder(folderId: string, page: number = 1, limit: number = 10, search: string = '', sortBy: string = 'created_at', order: string = 'asc'): Observable<any> {\r\n    const params = new HttpParams()\r\n      .set('page', page)\r\n      .set('limit', limit)\r\n      .set('search', search)\r\n      .set('sortBy', sortBy)\r\n      .set('order', order);\r\n\r\n    return this.http.get(`${this.apiUrl}/folders/${folderId}/images`, { params });\r\n  }\r\n\r\n  // Delete an image from a folder\r\n  deleteImage(folderId: number, imageId: number): Observable<any> {\r\n    return this.http.delete(`${this.apiUrl}/folders/${folderId}/images/${imageId}`);\r\n  }\r\n  getImage(imageId: string, quality?: number, format?: string, thumb?: boolean): Observable<any> {\r\n    let params: any = {};\r\n    if (quality) params.quality = quality.toString();\r\n    if (format) params.format = format;\r\n    if (thumb) params.thumb = 'true';\r\n    return this.http.get(`${this.apiUrl}/uploads/${imageId}`, { params, responseType: 'blob' });\r\n  }\r\n  // Rename an existing folder\r\n  renameFolder(folderId: string, newFolderName: string): Observable<any> {\r\n    const body = { folderName: newFolderName };\r\n    return this.http.put(`${this.apiUrl}/folders/${folderId}/rename`, body);\r\n  }\r\n  deleteFolder(folderId: string): Observable<any> {\r\n    return this.http.delete(`${this.apiUrl}/folders/${folderId}`);\r\n  }\r\n  refreshImage(folderId: string, imageId: string, formData: FormData): Observable<any> {\r\n    return this.http.post(`${this.apiUrl}/folders/${folderId}/images/${imageId}/refresh`, formData);\r\n  }\r\n  getTotalFolderCount(search: string = ''): Observable<{ count: number }> {\r\n    const params = new HttpParams().set('search', search);\r\n    return this.http.get<{ count: number }>(`${this.apiUrl}/folders/count`, { params });\r\n  }\r\n  getTotalImageCount(folderId: string): Observable<{ count: number }> {\r\n    return this.http.get<{ count: number }>(`${this.apiUrl}/folders/${folderId}/images/count`);\r\n  }\r\n}\r\n", "import { AfterViewInit, Component, ElementRef, OnInit, Renderer2 } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ImageApiService } from '../../common/services/image-api.service';\r\nimport { environment } from '../../../environments/environment';\r\nimport { ToastService } from '../../common/services/toast.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { UserImageApiService } from '../../common/services/user-image-api.service';\r\nimport { UserService } from '../../common/services/user.service';\r\ndeclare const bootstrap: any;\r\n\r\n@Component({\r\n  selector: 'app-img',\r\n  templateUrl: './img.component.html',\r\n  styleUrls: ['./img.component.scss']\r\n})\r\nexport class ImgComponent implements OnInit, AfterViewInit {\r\n  folders: any[] = [];\r\n  images: any[] = [];\r\n  selectedFile: File | null = null;\r\n  selectedFolderId: string | null = null;\r\n  selectedFolderName: string = '';\r\n  apiUrl = environment.MasterApi;\r\n\r\n  addFolderForm: FormGroup;\r\n  renameFolderForm: FormGroup;\r\n\r\n  confirmationMessage: string = '';\r\n  confirmationTitle: string = '';\r\n\r\n  // Image pagination properties\r\n  imagePage: number = 1;\r\n  imageLimit: number = 10;\r\n  totalImagePages: number = 1;\r\n\r\n  // Folder pagination properties\r\n  folderPage: number = 1;\r\n  folderItems: number = 0;\r\n  folderLimit: number = 30;\r\n  searchFolder: string = '';\r\n  sortFolderBy: string;\r\n  sortFolderOrder: string;\r\n\r\n  async onFolderPageChange(pageIndex: number): Promise<void> {\r\n    if (this.folderPage !== pageIndex) {\r\n      this.folderPage = pageIndex;\r\n      this.fetchFolders()\r\n    }\r\n  }\r\n  async onFolderPageSizeChange(newSize: number): Promise<void> {\r\n    if (this.folderLimit !== newSize) {\r\n      this.folderLimit = newSize;\r\n      this.folderPage = 1;\r\n      this.fetchFolders();\r\n    }\r\n  }\r\n  constructor(\r\n    private imageService: ImageApiService,\r\n    private formBuilder: FormBuilder,\r\n    private toast: ToastService,\r\n    private elementRef: ElementRef,\r\n    private renderer: Renderer2,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private userImageService: UserImageApiService,\r\n    private userService: UserService\r\n  ) {\r\n    this.initializeForms();\r\n  }\r\n\r\n  async ngOnInit() {\r\n    await this.userService.getUser().subscribe(async data => {\r\n      if (this.userId !== data.id) {\r\n        this.userId = data.id; await this.loadFolderCount();\r\n        await this.fetchFolders();\r\n      }\r\n    });\r\n    this.route.queryParams.subscribe(params => {\r\n      const folderId = params['folder'];\r\n      if (folderId) {\r\n        this.fetchImages(folderId);\r\n      }\r\n    });\r\n  }\r\n  async ngAfterViewInit() {\r\n    await this.loadFolderCount();\r\n    await this.fetchFolders();\r\n  }\r\n\r\n  // Initialize form groups\r\n  private initializeForms(): void {\r\n    this.addFolderForm = this.formBuilder.group({\r\n      folderName: ['', Validators.required]\r\n    });\r\n\r\n    this.renameFolderForm = this.formBuilder.group({\r\n      folderName: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  fetchFolders(): void {\r\n    const searchTerm = this.searchFolder.trim(); // Assuming you have a search term bound to a component variable\r\n    const sortBy = this.sortFolderBy || 'created_at';  // Default sort field\r\n    const sortOrder = this.sortFolderOrder || 'asc';   // Default sort order\r\n\r\n    this.folderLimit && this.imageService.getFolders(this.folderPage, this.folderLimit, searchTerm, sortBy, sortOrder).subscribe({\r\n      next: (data: any) => {\r\n        this.folders = data.folders;\r\n        this.folders.forEach((folder: any) => {\r\n          this.loadImageCount(folder.id); // Call loadImageCount with folder id\r\n        });\r\n      },\r\n      error: () => {\r\n        this.toast.show('Error fetching folders!', { class: 'bg-danger' });\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  onFileSelected(event: Event): void {\r\n    const input = event.target as HTMLInputElement;\r\n    if (input.files && input.files[0]) {\r\n      this.selectedFile = input.files[0];\r\n      if (this.selectedFolderId) this.uploadImage(this.selectedFolderId);\r\n    }\r\n  }\r\n\r\n  uploadImage(folderId: string): void {\r\n    if (this.selectedFile && folderId) {\r\n      const metadata = { description: 'Sample Image' };\r\n      this.imageService.uploadImage(folderId, this.selectedFile, metadata).subscribe({\r\n        next: () => { this.fetchImages(folderId); this.loadFolderCount() },\r\n        error: () => this.toast.show('Error uploading image!', { class: 'bg-danger' })\r\n      });\r\n    }\r\n  }\r\n\r\n  fetchImages(folderId: string, page: number = 1, limit: number = 10): void {\r\n    this.imageService.getImagesInFolder(folderId, page, limit).subscribe({\r\n      next: (data: any) => {\r\n        this.images = data.images;\r\n        this.selectedFolderId = folderId;\r\n        this.selectedFolderName = this.folders.find(folder => folder.id === folderId)?.name || '';\r\n\r\n        // Update the URL with folder ID as a query parameter\r\n        this.router.navigate([], {\r\n          relativeTo: this.route,\r\n          queryParams: { folder: folderId },\r\n          queryParamsHandling: 'merge', // To preserve other query params if any\r\n        });\r\n      },\r\n      error: () => {\r\n        this.toast.show('Error fetching images!', { class: 'bg-danger' });\r\n      }\r\n    });\r\n  }\r\n  userId: string\r\n\r\n  deleteImage(folderId: string, imageId: number): void {\r\n    this.userImageService.deleteImage(this.userId, folderId, imageId).subscribe({\r\n      next: () => { this.fetchImages(folderId); },\r\n      error: () => this.toast.show('Error deleting image!', { class: 'bg-danger' })\r\n    });\r\n  }\r\n  // Bootstrap modals handling\r\n  openAddFolderModal(): void {\r\n    const addFolderModal = new bootstrap.Modal(document.getElementById('addFolderModal'));\r\n    addFolderModal.show();\r\n  }\r\n\r\n  openRenameFolderModal(folderId: string): void {\r\n    const folder = this.folders.find(f => f.id === folderId);\r\n    if (folder) {\r\n      this.selectedFolderId = folderId;\r\n      this.renameFolderForm.patchValue({ folderName: folder.name });\r\n      this.fetchImages(folderId);\r\n      const renameFolderModal = new bootstrap.Modal(document.getElementById('renameFolderModal'));\r\n      renameFolderModal.show();\r\n    }\r\n  }\r\n\r\n  addFolder(): void {\r\n    if (this.addFolderForm.valid) {\r\n      const folderName = this.addFolderForm.value.folderName;\r\n      this.imageService.createFolder(folderName).subscribe({\r\n        next: () => {\r\n          this.fetchFolders();\r\n          this.addFolderForm.reset();\r\n          bootstrap.Modal.getInstance(document.getElementById('addFolderModal')).hide();\r\n          this.toast.show('Folder created successfully!', { class: 'bg-success' });\r\n          this.loadFolderCount();\r\n        },\r\n        error: () => {\r\n          this.toast.show('Error creating folder!', { class: 'bg-danger' });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  renameFolder(): void {\r\n    if (this.renameFolderForm.valid) {\r\n      const folderName = this.renameFolderForm.value.folderName;\r\n      this.imageService.renameFolder(this.selectedFolderId, folderName).subscribe({\r\n        next: () => {\r\n          this.fetchFolders();\r\n          this.toast.show('Folder renamed successfully!', { class: 'bg-success' });\r\n          bootstrap.Modal.getInstance(document.getElementById('renameFolderModal')).hide();\r\n        },\r\n        error: () => {\r\n          this.toast.show('Error renaming folder!', { class: 'bg-danger' });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  deleteFolder(): void {\r\n    if (this.selectedFolderId !== null) {\r\n      this.imageService.deleteFolder(this.selectedFolderId).subscribe({\r\n        next: () => {\r\n          this.toast.show('Folder deleted successfully!', { class: 'bg-success' });\r\n          this.selectedFolderId = null;\r\n          this.fetchFolders();\r\n        },\r\n        error: () => {\r\n          this.toast.show('Error deleting folder!', { class: 'bg-danger' });\r\n          this.selectedFolderId = null;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  copyHrefToClipboard(event: MouseEvent, href: string): void {\r\n    event.preventDefault();\r\n    const el = this.renderer.createElement('textarea');\r\n    el.value = `${this.apiUrl}/img${href}`;\r\n    this.renderer.appendChild(this.elementRef.nativeElement, el);\r\n    el.select();\r\n    document.execCommand('copy');\r\n    this.renderer.removeChild(this.elementRef.nativeElement, el);\r\n    this.toast.show(\"Image File path copied to clipboard\", { title: 'Copy Successed', class: 'bg-success' });\r\n\r\n  }\r\n\r\n  refreshImage(imageId: string, folderId: string): void {\r\n    const fileInput = document.createElement('input');\r\n    fileInput.type = 'file';\r\n    fileInput.accept = 'image/*';\r\n\r\n    fileInput.onchange = (event: Event) => {\r\n      const input = event.target as HTMLInputElement;\r\n      if (input.files && input.files.length > 0) {\r\n        const formData = new FormData();\r\n        formData.append('image', input.files[0]);\r\n\r\n        this.imageService.refreshImage(folderId, imageId, formData).subscribe({\r\n          next: () => {\r\n            this.fetchImages(this.selectedFolderId);\r\n            this.toast.show('Image replaced successfully!', { class: 'bg-success' });\r\n          },\r\n          error: () => {\r\n            this.toast.show('Error replacing image!', { class: 'bg-danger' });\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n    fileInput.click(); // Open file dialog\r\n  }\r\n\r\n  openFolderDeleteModal(folderId: string, folderName: string): void {\r\n    this.selectedFolderId = folderId;\r\n    this.selectedFolderName = folderName;\r\n    this.confirmationTitle = 'Confirm Folder Deletion';\r\n    this.confirmationMessage = `Are you sure you want to delete the folder \"${folderName}\"? This action cannot be undone.`;\r\n    const modal = new bootstrap.Modal(document.getElementById('confirmationModal'));\r\n    modal.show();\r\n  }\r\n  getImagePath(image: any): string {\r\n    const parts = image.image_url.split('/');\r\n    parts.pop();\r\n    const basePath = parts.join('/');\r\n    return `${basePath}/${image.id}`;\r\n  }\r\n  loadFolderCount(search: string = ''): void {\r\n    this.imageService.getTotalFolderCount(search).subscribe({\r\n      next: (response) => {\r\n        // Ensure response is valid before using it\r\n        if (response && typeof response.count === 'number') {\r\n          this.folderItems = response.count;\r\n\r\n        } else {\r\n          console.warn('Unexpected response structure:', response);\r\n        }\r\n      },\r\n      error: (error) => {\r\n        console.error('Error fetching folder count:', error);\r\n      },\r\n      complete: () => {\r\n\r\n      }\r\n    });\r\n  }\r\n  imageCounts: { [key: string]: number } = {};\r\n  async loadImageCount(folderId: string): Promise<void> {\r\n    try {\r\n      const response = await this.userImageService.getTotalImageCount(folderId).toPromise();\r\n      this.imageCounts[folderId] = response.totalCount;\r\n    } catch (error) {\r\n      console.error('Error fetching image count', error);\r\n      this.imageCounts[folderId] = 0; // Fallback in case of error\r\n    }\r\n  }\r\n}\r\n", "<div class=\"container\">\r\n  <button (click)=\"openAddFolderModal()\" class=\"btn btn-success btn-sm my-2\">\r\n    <i class=\"fa fa-plus me-2\"></i>Add Folder\r\n  </button>\r\n  <ul class=\"row g-2 list-unstyled\">\r\n    <li *ngFor=\"let folder of folders\" class=\"col-lg-3 col-md-4 col-sm-6 col-6\">\r\n      <div class=\"card border shadow-none\" [ngClass]=\"{'bg-dark text-white': selectedFolderId == folder.id}\">\r\n        <div class=\"card-body\">\r\n          <div class=\"mb-0 folder-svg-container d-flex flex-wrap align-items-center\">\r\n            <div class=\"me-3 bg-lighter avatar avatar-lg border h-40-px w-40-px p-1 rounded\" [ngClass]=\"{'bg-opacity-25': selectedFolderId == folder.id}\">\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 256 256\">\r\n                <rect width=\"256\" height=\"256\" fill=\"none\"></rect>\r\n                <path d=\"M69.77,112H208V88a8,8,0,0,0-8-8H130.67a8,8,0,0,1-4.8-1.6L98.13,57.6a8,8,0,0,0-4.8-1.6H40a8,8,0,0,0-8,8V208l30.18-90.53A8,8,0,0,1,69.77,112Z\" opacity=\"0.2\"></path>\r\n                <path d=\"M32,208V64a8,8,0,0,1,8-8H93.33a8,8,0,0,1,4.8,1.6l27.74,20.8a8,8,0,0,0,4.8,1.6H200a8,8,0,0,1,8,8v24\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\">\r\n                </path>\r\n                <path d=\"M32,208l30.18-90.53A8,8,0,0,1,69.77,112H232a8,8,0,0,1,7.59,10.53L211.09,208Z\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\"></path>\r\n              </svg>\r\n            </div>\r\n            <div>\r\n              <p class=\"fs-14 fw-medium mb-1 lh-1\">\r\n                <a href=\"#\" class=\"link fw-bold text-decoration-none\" [ngClass]=\"{'active pe-none text-white': selectedFolderId == folder.id}\" (click)=\"fetchImages(folder.id);false;\">{{ folder.name }}</a>\r\n              </p>\r\n              <span class=\"fs-12\">{{ imageCounts[folder.id] }} Files</span>\r\n            </div>\r\n            <div class=\"float-end ms-auto\">\r\n              <div class=\"dropdown\">\r\n                <a href=\"#\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\" class=\"btn btn-flat btn-sm\" aria-label=\"More Option\">\r\n                  <i class=\"fa fa-ellipsis-v\" [ngClass]=\"{'text-white': selectedFolderId == folder.id}\"></i>\r\n                </a>\r\n                <ul class=\"dropdown-menu  dropdown-menu-end bg-dark dropdown-menu-dark\">\r\n                  <li><a class=\"dropdown-item\" href=\"#\" (click)=\"openFolderDeleteModal(folder.id, folder.name);false\"><i class=\"w-20-px text-center fa fa-trash me-2 text-danger\"></i>Delete</a> </li>\r\n                  <li><a class=\"dropdown-item\" href=\"#\" (click)=\"openRenameFolderModal(folder.id);false\"><i class=\"w-20-px text-center fa fa-pencil me-2 text-primary\"></i>Rename</a> </li>\r\n                  <li><a href=\"#\" class=\"dropdown-item\" (click)=\"false;\">\r\n                      <i class=\"w-20-px text-center fa fa-eye-slash me-2 text-mute\"></i>Hide Folder\r\n                    </a></li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <div class=\"progress progress-xs mt-3\">\r\n              <div class=\"progress-bar bg-primary progress-bar-striped\" role=\"progressbar\" [style]=\"'width: '+imageCounts[folder.id]+'%'\" [attr.aria-valuenow]=\"imageCounts[folder.id]\" aria-valuemin=\"0\" aria-valuemax=\"100\" [attr.aria-label]=\"'Image Folder capacity: ' + imageCounts[folder.id] + '%'\">\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </li>\r\n  </ul>\r\n  <div pagination [currentPage]=\"folderPage\" [totalItems]=\"folderItems\" [pageSize]=\"folderLimit\" [pageSizes]=\"[30, 50, 100]\" (currentPageChange)=\"onFolderPageChange($event)\" (pageSizeChange)=\"onFolderPageSizeChange($event)\"></div>\r\n  <ng-container *ngIf=\"selectedFolderId\">\r\n    <div class=\"card shadow\">\r\n      <div class=\"card-header d-flex align-items-center\">\r\n        <h6 class=\"fw-bold m-0\">{{ selectedFolderName }}</h6>\r\n        <div class=\"ms-auto\">\r\n          <label for=\"uploadImage\" class=\"btn btn-success ms-2 btn-sm\"><i class=\"fa fa-image me-2\"></i>Upload\r\n            Image</label>\r\n          <input class=\"d-none\" type=\"file\" (change)=\"onFileSelected($event)\" id=\"uploadImage\" />\r\n        </div>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <ul class=\"row g-2 list-unstyled align-items-stretch\">\r\n          <li *ngFor=\"let image of images\" class=\"col-lg-2 col-md-3 col-sm-4 col-6 d-flex flex-column\">\r\n            <div class=\"d-flex mt-auto flex-column p-2 border rounded shadow-sm w-100\">\r\n              <div class=\"img-container flex-grow-1 d-flex align-items-end mb-2\">\r\n                <img [src]=\"apiUrl + '/img' + getImagePath(image) + '?quality=30'\" alt=\"Image\" class=\"img-fluid rounded mx-auto\" />\r\n              </div>\r\n              <div class=\"row g-2\">\r\n                <div class=\"col-4\">\r\n                  <button (click)=\"refreshImage(image.id, selectedFolderId)\" class=\"btn btn-sm btn-outline-success w-100\" aria-label=\"Replace\">\r\n                    <i class=\"fa fa-refresh\"></i>\r\n                  </button>\r\n                </div>\r\n                <div class=\"col-4\">\r\n                  <a href=\"{{getImagePath(image)}}\" class=\"btn btn-sm btn-outline-dark w-100\" (click)=\"copyHrefToClipboard($event, getImagePath(image))\" aria-label=\"Copy\">{{image.url}}<i class=\"fa fa-copy\"></i></a>\r\n                </div>\r\n                <div class=\"col-4\">\r\n                  <button (click)=\"deleteImage(selectedFolderId, image.id)\" class=\"btn btn-sm btn-outline-danger w-100\" aria-label=\"Delete\">\r\n                    <i class=\"fa fa-trash\"></i>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n\r\n<!-- Add Folder Modal -->\r\n<div class=\"modal fade\" id=\"addFolderModal\" tabindex=\"-1\" aria-labelledby=\"addFolderModalLabel\" aria-hidden=\"true\">\r\n  <div class=\"modal-dialog\">\r\n    <div class=\"modal-content\">\r\n      <div class=\"modal-header\">\r\n        <h5 class=\"modal-title\" id=\"addFolderModalLabel\">Add Folder</h5>\r\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        <form [formGroup]=\"addFolderForm\">\r\n          <div class=\"mb-3\">\r\n            <label for=\"folderName\" class=\"form-label\">Folder Name</label>\r\n            <input type=\"text\" class=\"form-control\" formControlName=\"folderName\" id=\"folderName\" />\r\n          </div>\r\n        </form>\r\n      </div>\r\n      <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\r\n        <button type=\"button\" class=\"btn btn-primary\" (click)=\"addFolder()\">Add Folder</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<!-- Rename Folder Modal -->\r\n<div class=\"modal fade\" id=\"renameFolderModal\" tabindex=\"-1\" aria-labelledby=\"renameFolderModalLabel\" aria-hidden=\"true\">\r\n  <div class=\"modal-dialog\">\r\n    <div class=\"modal-content\">\r\n      <div class=\"modal-header\">\r\n        <h5 class=\"modal-title\" id=\"renameFolderModalLabel\">Rename Folder</h5>\r\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        <form [formGroup]=\"renameFolderForm\">\r\n          <div class=\"mb-3\">\r\n            <label for=\"folderName\" class=\"form-label\">Folder Name</label>\r\n            <input type=\"text\" class=\"form-control\" formControlName=\"folderName\" id=\"folderName\" />\r\n          </div>\r\n        </form>\r\n      </div>\r\n      <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-sm btn-outline-danger\" data-bs-dismiss=\"modal\"><i class=\"fa fa-close me-2\"></i>Cancel</button>\r\n        <button type=\"button\" class=\"btn btn-sm btn-success text-white\" (click)=\"renameFolder()\"><i class=\"fa fa-save me-2\"></i>Save</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<app-confirmation-modal [title]=\"confirmationTitle\" [message]=\"confirmationMessage\" (confirm)=\"deleteFolder()\"></app-confirmation-modal>", "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ImgComponent } from './img.component';\r\n\r\nconst routes: Routes = [{\r\n  path: '',\r\n  component: ImgComponent,\r\n  data: {\r\n    title: 'Images | Gujarat Uvach',\r\n    description: 'Welcome to the Gujarat Uvach dashboard. Access a variety of services and features designed to enhance your experience.',\r\n    keywords: 'Gujarat Uvach, services, dashboard, user portal, features, access',\r\n    robots: 'index, follow',\r\n  }\r\n}];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ImgRoutingModule { }\r\n", "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ImgRoutingModule } from './img-routing.module';\r\nimport { ImgComponent } from './img.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { SharedModule } from '../../common/shared/shared.module';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ImgComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ImgRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    SharedModule\r\n  ]\r\n})\r\nexport class ImgModule { }\r\n"],
  "mappings": "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",
  "names": []
}
