{
  "version": 3,
  "sources": ["src/app/common/services/auth.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\nimport { CookieService } from 'ngx-cookie-service';\r\nimport { catchError, Observable, throwError } from 'rxjs';\r\nimport { environment } from '../../../environments/environment';\r\nimport { UserService } from './user.service';\r\nimport { Router } from '@angular/router';\r\nimport { User } from '../interfaces/commonInterfaces';\r\nimport { LoaderService } from './loader';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  private apiUrl = environment.MasterApi + '/auth';\r\n  constructor(private http: HttpClient, private cookieService: CookieService, private userService: UserService, private router: Router, private loaderService: LoaderService) {\r\n\r\n  }\r\n\r\n  // Login user method\r\n  loginUser(username: string, password: string): Observable<any> {\r\n    return this.http.post<any>(`${this.apiUrl}/login`, { username, password })\r\n  }\r\n  // Set token in the cookies\r\n  setToken(token: string): void {\r\n    this.cookieService.set('token', token, {\r\n      path: '/', // Ensures the cookie is available throughout the application\r\n      secure: false // Set to true if you're using HTTPS\r\n    });\r\n  }\r\n\r\n\r\n  // Get token method (no need for async here since cookies are accessed synchronously)\r\n  getToken(): string {\r\n    return this.cookieService.get('token');\r\n  }\r\n\r\n  // Check if the user is authenticated\r\n  isAuthenticated(): boolean {\r\n    const token = this.getToken();\r\n    return token ? true : false; // Returns true if token exists, otherwise false\r\n  }\r\n  hasRole(expectedRoles: string[]): boolean {\r\n    // Retrieve the user cookie\r\n    const userString = this.cookieService.get('user');\r\n\r\n    // Check if userString exists and is not empty\r\n    if (!userString) {\r\n      console.warn('User cookie is missing or empty');\r\n      return false;  // Return false if the user cookie is missing\r\n    }\r\n\r\n    let user: User | null = null; // Initialize user as null\r\n\r\n    try {\r\n      user = JSON.parse(userString); // Try to parse the JSON string\r\n    } catch (error) {\r\n      console.error('Error parsing user JSON:', error);\r\n      return false;  // Return false if parsing fails\r\n    }\r\n\r\n    // Now you can safely access the roles if the user object is valid\r\n    if (user && user.roles) {\r\n      const roles = user.roles;  // Access the roles array or string\r\n\r\n      // Split roles by comma, trim whitespace, and check if any of the expectedRoles are included\r\n      return expectedRoles.some(role =>\r\n        roles.split(',').map(item => item.trim()).includes(role)\r\n      );\r\n    }\r\n\r\n    return false;  // Return false if no roles or user is null\r\n  }\r\n\r\n  resendVerificationEmail(email: string): Observable<any> {\r\n    const payload = { email };\r\n    return this.http.post(`${this.apiUrl}/resend-verification`, payload)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n  private handleError(error: HttpErrorResponse) {\r\n    let errorMessage = 'An unknown error occurred';\r\n\r\n    if (error.error instanceof ErrorEvent) {\r\n      // Client-side error\r\n      errorMessage = `Error: ${error.error.message}`;\r\n    } else {\r\n      // Server-side error\r\n      if (error.status === 404) {\r\n        errorMessage = 'User not found';\r\n      } else if (error.status === 400) {\r\n        errorMessage = 'Email is already verified';\r\n      } else {\r\n        errorMessage = `Server error: ${error.message}`;\r\n      }\r\n    }\r\n    return throwError(errorMessage);\r\n  }\r\n  validateToken(): Observable<any> {\r\n    const token = this.cookieService.get('token');\r\n    if (!token) {\r\n      // No token in cookies, you may handle this error (like logging out the user)\r\n      return new Observable(observer => {\r\n        observer.error({ message: 'No token provided' });\r\n      });\r\n    }\r\n\r\n    const headers = new HttpHeaders({\r\n      'Authorization': `Bearer ${token}` // Send the token in the Authorization header\r\n    });\r\n    return this.http.post(`${environment.MasterApi}/validate-token`, {}, { headers }); // POST request to backend\r\n  }\r\n  logout(): void {\r\n    // Remove the token from cookies\r\n    this.cookieService.delete('token', '/'); // Ensure to delete it from the entire application path\r\n\r\n    // Optionally remove user data from cookies\r\n    this.cookieService.delete('user', '/');\r\n\r\n    // Optionally, notify the backend (if required)\r\n    // this.http.post(`${this.apiUrl}/logout`, {}).subscribe(\r\n    //   response => {\r\n    //     console.log('Logout successful:', response);\r\n    //   },\r\n    //   error => {\r\n    //     console.error('Logout error:', error);\r\n    //   }\r\n    // );\r\n\r\n    // Navigate to the login page or a public area\r\n    this.router.navigate(['/login']); // Adjust the route as per your application's routing structure\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAaM,IAAO,cAAP,MAAO,aAAW;EAEtB,YAAoB,MAA0B,eAAsC,aAAkC,QAAwB,eAA4B;AAAtJ,SAAA,OAAA;AAA0B,SAAA,gBAAA;AAAsC,SAAA,cAAA;AAAkC,SAAA,SAAA;AAAwB,SAAA,gBAAA;AADtI,SAAA,SAAS,YAAY,YAAY;EAGzC;;EAGA,UAAU,UAAkB,UAAgB;AAC1C,WAAO,KAAK,KAAK,KAAU,GAAG,KAAK,MAAM,UAAU,EAAE,UAAU,SAAQ,CAAE;EAC3E;;EAEA,SAAS,OAAa;AACpB,SAAK,cAAc,IAAI,SAAS,OAAO;MACrC,MAAM;;MACN,QAAQ;;KACT;EACH;;EAIA,WAAQ;AACN,WAAO,KAAK,cAAc,IAAI,OAAO;EACvC;;EAGA,kBAAe;AACb,UAAM,QAAQ,KAAK,SAAQ;AAC3B,WAAO,QAAQ,OAAO;EACxB;EACA,QAAQ,eAAuB;AAE7B,UAAM,aAAa,KAAK,cAAc,IAAI,MAAM;AAGhD,QAAI,CAAC,YAAY;AACf,cAAQ,KAAK,iCAAiC;AAC9C,aAAO;IACT;AAEA,QAAI,OAAoB;AAExB,QAAI;AACF,aAAO,KAAK,MAAM,UAAU;IAC9B,SAAS,OAAO;AACd,cAAQ,MAAM,4BAA4B,KAAK;AAC/C,aAAO;IACT;AAGA,QAAI,QAAQ,KAAK,OAAO;AACtB,YAAM,QAAQ,KAAK;AAGnB,aAAO,cAAc,KAAK,UACxB,MAAM,MAAM,GAAG,EAAE,IAAI,UAAQ,KAAK,KAAI,CAAE,EAAE,SAAS,IAAI,CAAC;IAE5D;AAEA,WAAO;EACT;EAEA,wBAAwB,OAAa;AACnC,UAAM,UAAU,EAAE,MAAK;AACvB,WAAO,KAAK,KAAK,KAAK,GAAG,KAAK,MAAM,wBAAwB,OAAO,EAChE,KACC,WAAW,KAAK,WAAW,CAAC;EAElC;EACQ,YAAY,OAAwB;AAC1C,QAAI,eAAe;AAEnB,QAAI,MAAM,iBAAiB,YAAY;AAErC,qBAAe,UAAU,MAAM,MAAM,OAAO;IAC9C,OAAO;AAEL,UAAI,MAAM,WAAW,KAAK;AACxB,uBAAe;MACjB,WAAW,MAAM,WAAW,KAAK;AAC/B,uBAAe;MACjB,OAAO;AACL,uBAAe,iBAAiB,MAAM,OAAO;MAC/C;IACF;AACA,WAAO,WAAW,YAAY;EAChC;EACA,gBAAa;AACX,UAAM,QAAQ,KAAK,cAAc,IAAI,OAAO;AAC5C,QAAI,CAAC,OAAO;AAEV,aAAO,IAAI,WAAW,cAAW;AAC/B,iBAAS,MAAM,EAAE,SAAS,oBAAmB,CAAE;MACjD,CAAC;IACH;AAEA,UAAM,UAAU,IAAI,YAAY;MAC9B,iBAAiB,UAAU,KAAK;;KACjC;AACD,WAAO,KAAK,KAAK,KAAK,GAAG,YAAY,SAAS,mBAAmB,CAAA,GAAI,EAAE,QAAO,CAAE;EAClF;EACA,SAAM;AAEJ,SAAK,cAAc,OAAO,SAAS,GAAG;AAGtC,SAAK,cAAc,OAAO,QAAQ,GAAG;AAarC,SAAK,OAAO,SAAS,CAAC,QAAQ,CAAC;EACjC;;;uBAvHW,cAAW,mBAAA,UAAA,GAAA,mBAAA,aAAA,GAAA,mBAAA,WAAA,GAAA,mBAAA,MAAA,GAAA,mBAAA,aAAA,CAAA;IAAA;EAAA;;4EAAX,cAAW,SAAX,aAAW,WAAA,YAFV,OAAM,CAAA;EAAA;;",
  "names": []
}
